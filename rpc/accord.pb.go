// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: rpc/accord.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK   Status = 0 // resource is OK
	Status_DONE Status = 1 // resource is marked as done
	Status_HELD Status = 2 // resource is currently held
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "DONE",
		2: "HELD",
	}
	Status_value = map[string]int32{
		"OK":   0,
		"DONE": 1,
		"HELD": 2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_accord_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_rpc_accord_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{0}
}

type ListRequest_Filter_Status int32

const (
	ListRequest_Filter_ALL     ListRequest_Filter_Status = 0
	ListRequest_Filter_DONE    ListRequest_Filter_Status = 1
	ListRequest_Filter_PENDING ListRequest_Filter_Status = 2
)

// Enum value maps for ListRequest_Filter_Status.
var (
	ListRequest_Filter_Status_name = map[int32]string{
		0: "ALL",
		1: "DONE",
		2: "PENDING",
	}
	ListRequest_Filter_Status_value = map[string]int32{
		"ALL":     0,
		"DONE":    1,
		"PENDING": 2,
	}
)

func (x ListRequest_Filter_Status) Enum() *ListRequest_Filter_Status {
	p := new(ListRequest_Filter_Status)
	*p = x
	return p
}

func (x ListRequest_Filter_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListRequest_Filter_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_accord_proto_enumTypes[1].Descriptor()
}

func (ListRequest_Filter_Status) Type() protoreflect.EnumType {
	return &file_rpc_accord_proto_enumTypes[1]
}

func (x ListRequest_Filter_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListRequest_Filter_Status.Descriptor instead.
func (ListRequest_Filter_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{7, 0, 0}
}

// Handle
type Handle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Handle ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Resource name/identifier, unique within namespace.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Custom namespace.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Expiration UNIX timestamp (millisecond precision)
	ExpTms int64 `protobuf:"varint,4,opt,name=exp_tms,json=expTms,proto3" json:"exp_tms,omitempty"`
	// Done at UNIX timestamp (millisecond precision)
	DoneTms int64 `protobuf:"varint,5,opt,name=done_tms,json=doneTms,proto3" json:"done_tms,omitempty"`
	// Describes the number of times this handle has been acquired.
	NumAcquired uint32 `protobuf:"varint,6,opt,name=num_acquired,json=numAcquired,proto3" json:"num_acquired,omitempty"`
	// Metadata.
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Handle) Reset() {
	*x = Handle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handle) ProtoMessage() {}

func (x *Handle) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handle.ProtoReflect.Descriptor instead.
func (*Handle) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{0}
}

func (x *Handle) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Handle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Handle) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Handle) GetExpTms() int64 {
	if x != nil {
		return x.ExpTms
	}
	return 0
}

func (x *Handle) GetDoneTms() int64 {
	if x != nil {
		return x.DoneTms
	}
	return 0
}

func (x *Handle) GetNumAcquired() uint32 {
	if x != nil {
		return x.NumAcquired
	}
	return 0
}

func (x *Handle) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AcquireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner identifier
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Resource name/identifier.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Custom namespace.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// TTL the maximum life-span of the acquired resource (in seconds).
	Ttl uint32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Custom, optional metadata.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AcquireRequest) Reset() {
	*x = AcquireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireRequest) ProtoMessage() {}

func (x *AcquireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireRequest.ProtoReflect.Descriptor instead.
func (*AcquireRequest) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{1}
}

func (x *AcquireRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AcquireRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AcquireRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AcquireRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *AcquireRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AcquireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status  `protobuf:"varint,1,opt,name=status,proto3,enum=blacksquaremedia.accord.Status" json:"status,omitempty"`
	Handle *Handle `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *AcquireResponse) Reset() {
	*x = AcquireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireResponse) ProtoMessage() {}

func (x *AcquireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireResponse.ProtoReflect.Descriptor instead.
func (*AcquireResponse) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{2}
}

func (x *AcquireResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *AcquireResponse) GetHandle() *Handle {
	if x != nil {
		return x.Handle
	}
	return nil
}

type RenewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner identifier.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Handle identifier.
	HandleId []byte `protobuf:"bytes,2,opt,name=handle_id,json=handleId,proto3" json:"handle_id,omitempty"`
	// TTL the maximum life-span of the acquired resource (in seconds).
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional metadata.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenewRequest) Reset() {
	*x = RenewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewRequest) ProtoMessage() {}

func (x *RenewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewRequest.ProtoReflect.Descriptor instead.
func (*RenewRequest) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{3}
}

func (x *RenewRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RenewRequest) GetHandleId() []byte {
	if x != nil {
		return x.HandleId
	}
	return nil
}

func (x *RenewRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RenewRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RenewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenewResponse) Reset() {
	*x = RenewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewResponse) ProtoMessage() {}

func (x *RenewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewResponse.ProtoReflect.Descriptor instead.
func (*RenewResponse) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{4}
}

type DoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner identifier.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Handle identifier.
	HandleId []byte `protobuf:"bytes,2,opt,name=handle_id,json=handleId,proto3" json:"handle_id,omitempty"`
	// Optional metadata.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DoneRequest) Reset() {
	*x = DoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoneRequest) ProtoMessage() {}

func (x *DoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoneRequest.ProtoReflect.Descriptor instead.
func (*DoneRequest) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{5}
}

func (x *DoneRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DoneRequest) GetHandleId() []byte {
	if x != nil {
		return x.HandleId
	}
	return nil
}

func (x *DoneRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoneResponse) Reset() {
	*x = DoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoneResponse) ProtoMessage() {}

func (x *DoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoneResponse.ProtoReflect.Descriptor instead.
func (*DoneResponse) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{6}
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter object.
	Filter *ListRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Skip the first N records.
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{7}
}

func (x *ListRequest) GetFilter() *ListRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace prefix.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Only certain status.
	Status ListRequest_Filter_Status `protobuf:"varint,2,opt,name=status,proto3,enum=blacksquaremedia.accord.ListRequest_Filter_Status" json:"status,omitempty"`
	// Filter by metadata.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListRequest_Filter) Reset() {
	*x = ListRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_accord_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest_Filter) ProtoMessage() {}

func (x *ListRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_accord_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListRequest_Filter) Descriptor() ([]byte, []int) {
	return file_rpc_accord_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListRequest_Filter) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ListRequest_Filter) GetStatus() ListRequest_Filter_Status {
	if x != nil {
		return x.Status
	}
	return ListRequest_Filter_ALL
}

func (x *ListRequest_Filter) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_rpc_accord_proto protoreflect.FileDescriptor

var file_rpc_accord_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x06,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x5f,
	0x74, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x54, 0x6d,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0f,
	0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x0e, 0x0a, 0x0c, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x97, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xaa, 0x02, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x4c, 0x44, 0x10, 0x02, 0x32,
	0xe0, 0x02, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x5c, 0x0a, 0x07, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x25, 0x2e,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x04,
	0x44, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x30, 0x01, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x73, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_accord_proto_rawDescOnce sync.Once
	file_rpc_accord_proto_rawDescData = file_rpc_accord_proto_rawDesc
)

func file_rpc_accord_proto_rawDescGZIP() []byte {
	file_rpc_accord_proto_rawDescOnce.Do(func() {
		file_rpc_accord_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_accord_proto_rawDescData)
	})
	return file_rpc_accord_proto_rawDescData
}

var file_rpc_accord_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rpc_accord_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_rpc_accord_proto_goTypes = []interface{}{
	(Status)(0),                    // 0: blacksquaremedia.accord.Status
	(ListRequest_Filter_Status)(0), // 1: blacksquaremedia.accord.ListRequest.Filter.Status
	(*Handle)(nil),                 // 2: blacksquaremedia.accord.Handle
	(*AcquireRequest)(nil),         // 3: blacksquaremedia.accord.AcquireRequest
	(*AcquireResponse)(nil),        // 4: blacksquaremedia.accord.AcquireResponse
	(*RenewRequest)(nil),           // 5: blacksquaremedia.accord.RenewRequest
	(*RenewResponse)(nil),          // 6: blacksquaremedia.accord.RenewResponse
	(*DoneRequest)(nil),            // 7: blacksquaremedia.accord.DoneRequest
	(*DoneResponse)(nil),           // 8: blacksquaremedia.accord.DoneResponse
	(*ListRequest)(nil),            // 9: blacksquaremedia.accord.ListRequest
	nil,                            // 10: blacksquaremedia.accord.Handle.MetadataEntry
	nil,                            // 11: blacksquaremedia.accord.AcquireRequest.MetadataEntry
	nil,                            // 12: blacksquaremedia.accord.RenewRequest.MetadataEntry
	nil,                            // 13: blacksquaremedia.accord.DoneRequest.MetadataEntry
	(*ListRequest_Filter)(nil),     // 14: blacksquaremedia.accord.ListRequest.Filter
	nil,                            // 15: blacksquaremedia.accord.ListRequest.Filter.MetadataEntry
}
var file_rpc_accord_proto_depIdxs = []int32{
	10, // 0: blacksquaremedia.accord.Handle.metadata:type_name -> blacksquaremedia.accord.Handle.MetadataEntry
	11, // 1: blacksquaremedia.accord.AcquireRequest.metadata:type_name -> blacksquaremedia.accord.AcquireRequest.MetadataEntry
	0,  // 2: blacksquaremedia.accord.AcquireResponse.status:type_name -> blacksquaremedia.accord.Status
	2,  // 3: blacksquaremedia.accord.AcquireResponse.handle:type_name -> blacksquaremedia.accord.Handle
	12, // 4: blacksquaremedia.accord.RenewRequest.metadata:type_name -> blacksquaremedia.accord.RenewRequest.MetadataEntry
	13, // 5: blacksquaremedia.accord.DoneRequest.metadata:type_name -> blacksquaremedia.accord.DoneRequest.MetadataEntry
	14, // 6: blacksquaremedia.accord.ListRequest.filter:type_name -> blacksquaremedia.accord.ListRequest.Filter
	1,  // 7: blacksquaremedia.accord.ListRequest.Filter.status:type_name -> blacksquaremedia.accord.ListRequest.Filter.Status
	15, // 8: blacksquaremedia.accord.ListRequest.Filter.metadata:type_name -> blacksquaremedia.accord.ListRequest.Filter.MetadataEntry
	3,  // 9: blacksquaremedia.accord.V1.Acquire:input_type -> blacksquaremedia.accord.AcquireRequest
	5,  // 10: blacksquaremedia.accord.V1.Renew:input_type -> blacksquaremedia.accord.RenewRequest
	7,  // 11: blacksquaremedia.accord.V1.Done:input_type -> blacksquaremedia.accord.DoneRequest
	9,  // 12: blacksquaremedia.accord.V1.List:input_type -> blacksquaremedia.accord.ListRequest
	4,  // 13: blacksquaremedia.accord.V1.Acquire:output_type -> blacksquaremedia.accord.AcquireResponse
	6,  // 14: blacksquaremedia.accord.V1.Renew:output_type -> blacksquaremedia.accord.RenewResponse
	8,  // 15: blacksquaremedia.accord.V1.Done:output_type -> blacksquaremedia.accord.DoneResponse
	2,  // 16: blacksquaremedia.accord.V1.List:output_type -> blacksquaremedia.accord.Handle
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_rpc_accord_proto_init() }
func file_rpc_accord_proto_init() {
	if File_rpc_accord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_accord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Handle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_accord_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_accord_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_accord_proto_goTypes,
		DependencyIndexes: file_rpc_accord_proto_depIdxs,
		EnumInfos:         file_rpc_accord_proto_enumTypes,
		MessageInfos:      file_rpc_accord_proto_msgTypes,
	}.Build()
	File_rpc_accord_proto = out.File
	file_rpc_accord_proto_rawDesc = nil
	file_rpc_accord_proto_goTypes = nil
	file_rpc_accord_proto_depIdxs = nil
}
